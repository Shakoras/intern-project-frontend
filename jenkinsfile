pipeline {
    agent any
    parameters {
        choice(name: 'DEPLOYMENT_METHOD', choices: ['Docker Compose', 'Kubernetes'], description: 'Choose the deployment method.')
    }
  environment {
        TF_VAR_subscription_id = credentials('subscription_id')
        TF_VAR_tenant_id = credentials('tenant_id')
    }
    stages {
        stage('Checkout') {
            steps {
                git url: 'git@github.com:Shakoras/intern-project-frontend.git',
                    credentialsId: 'b0eadd19-a3e9-4405-9646-c0f37b8dee78',
                    branch: 'main'
   
            }
        }
        stage('Install dependencies') {
            steps {
               sh '''
                    npm install
                '''
            }
        }

        stage('Build Application') {
            steps {
                sh 'ng build --prod'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t shakoras/frontend:latest .'
                }
            }
        }
        stage('Push to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds',
                                                  usernameVariable: 'DOCKER_USER',
                                                  passwordVariable: 'DOCKER_PASS')]) {
                    echo 'Pushing Image to DockerHub...'
                    sh '''
                        echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                        docker push shakoras/frontend:latest
                    '''
                }
            }
        }

       stage('Setup Azure Resources with Terraform') {
            when {
                expression { params.DEPLOYMENT_METHOD == 'Kubernetes' }
            }
            steps {
                script {
                    echo 'Initializing and applying Terraform...'
                    sh '''
                        cd terraform
                        terraform init
                        terraform plan
                        terraform apply -auto-approve
                    '''
                    echo 'Resource provisioning was Successful!'
                }
            }
        }
        stage('Deployment') {
            steps {
                script {
                    if (params.DEPLOYMENT_METHOD == 'Docker Compose') {
                        echo 'Deploying Frontend locally with Docker Compose...'
                        sh "${env.dup_d}"
                        echo 'Local deployment is Successful!'

                    } else if (params.DEPLOYMENT_METHOD == 'Kubernetes') {
                        echo 'Deploying Frontend to Kubernetes...'
                        sh '''
                            kubectl apply -f k8s/deployment-frontend.yaml
                            kubectl apply -f k8s/service-frontend.yaml
                        '''
                        echo 'Waiting for the application to be available...'
                        sh 'kubectl rollout status deployment/frontend'
                        echo 'Azure deployment is Successful!'
                    }
                }
            }
        }
    }
    post {
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
